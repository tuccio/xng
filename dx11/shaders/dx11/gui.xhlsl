struct VSInput
{
	float2 position : POSITION;
	float2 uv       : TEXCOORD0;
};

struct PSInput
{
	float4 position : SV_Position;
	float2 uv       : TEXCOORD0;
};

#if defined(XNG_TEXT)

	cbuffer cbPerFrame : register(b0)
	{
		float4x4 ProjectionMatrix;
		float4   Color;
		float4   BorderColor;
		float    BorderSize;
		float    FontWidth;
		float    FontSpreadFactor;
		float    FontScale;
	};

#else

	cbuffer cbPerFrame : register(b0)
	{
		float4x4 ProjectionMatrix;
		float4   Color;
	};

#endif

#xng section(vertex:main_vs)

PSInput main_vs(VSInput input)
{
	PSInput output;
	output.position = mul(float4(input.position, 0, 1), ProjectionMatrix);
	output.uv       = input.uv;
	return output;
}

#xng section(pixel:main_ps)

#xng include("samplers.xhlsl")
#xng include("text.xhlsl")

float4 RenderTexturedRectangle(in float2 uv, in Texture2D<float4> tex, in SamplerState s)
{
	return tex.Sample(s, uv);
}
	
float4 RenderMonochromaticRectangle(in float4 color)
{
	return color;
}

Texture2D<float4> RectTex : register(t0);
Texture2D<float4>  FontTex : register(t1);

float4 main_ps(PSInput input) : SV_Target0
{
	#if defined(XNG_TEXTURED)
		return RenderTexturedRectangle(input.uv, RectTex, LinearClamp);
	#elif defined(XNG_TEXT)
		return RenderText(input.uv, Color, BorderColor, BorderSize, FontWidth, FontSpreadFactor, FontScale, FontTex, LinearClamp);
	#else
		return RenderMonochromaticRectangle(Color);
	#endif
}